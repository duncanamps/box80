//
// test_z80.asm
//
// Test Z80 instructions exhaustively so they can be compared against
// reference values
// Duncan Munro - 9th July 2023
//
// Designed so I can test/fix the box80 virtual machine and heavily inspired
// and much code copied from ZEXALL/ZEXDOC by Frank D. Cringle, however they
// are intended for validation/certification rather than fault finding, hence
// this implementation.
//
// METHOD OF OPERATION
// -------------------
//
// Works in the same was as ZEXALL in that it has a flag mask byte, a
// text description in 30 characters and three register sets.
//
// The first register set is a base or starting set, and contains all the
// registers.
//
// The second set is the increment set where if 1 bits are set, the tester
// will increment each of these bits in turn. This will cause 2^setbits count
// of tests to be carried out.
//
// The third set is the shift set which are successively inverted. This will
// cause setbits count of test to be carried out.
//
// The total number of tests carried out for each instruction will be
// the product of the increment permutations and the shift permutations
// and runs into millions of tests.
//
// Output is to the console and consists of 4 bytes of instruction output
// followed by 16 bytes of register base output. Finally, the 16 bytes of
// results are printed with the flags masked as appropriate.
//
// Looks like this (made up numbers):
//
//   INPUT..................................   OUTPUT........................
//   Insts    Mem IY  IX  HL  DE  BC  F A SP   Mem IY  IX  HL  DE  BC  F A SP
//   ED420000-3208884F2BF239B31F7E6315D3895E46-3208884F2BF2D69D1F7E6315D3895E46
//
// The data row is repeated for each permutation of the instruction until all
// permutations have been exhausted. The output is captured to a text file and
// stored in a database; there will be a set of entries from a reference
// machine and a set of entries from the machine under test. Comparing both
// sets of entries will highlight combinations of instructions and registers
// that are not operating correctly.
//

BOX80		EQU		1

			IFDEF BOX80
			ORG		$2000
			ELSE
			ORG		$0100		; Let's start at the normal CP/M address
			ENDIF


//
// Define some macros to help us work with this
//

// Implement a test base, increment or shift

tstr:		macro	insn, memop, iy, ix, hl, de, bc, flags, acc, sp
lab{#}:		db	{insn}
			ds	lab{#}+4-$,0
			dw	{memop},{iy},{ix},{hl},{de},{bc}
			db	{flags}
			db	{acc}
			dw	{sp}
			if	$-lab{#} != 20
			msgerror	'missing parameter'
			endif
			endm

// Implement a message

tmsg:		macro	m
lab{#}:		db	{m}
			if	$ >= lab{#}+30
			msgerror	'message too long'
			endif
			ds	lab{#}+30-$,'.'
			db	'$'
			endm

// Startup code

	jp	start

; machine state before test (needs to be at predictably constant address)
msbt:	ds	14
spbt:	ds	2


start:		; ld	hl,(6)
			; ld	sp,hl
			IFDEF	BOX80
			LD		HL,$BFFE
			LD		SP,HL
			ENDIF
//			ld		de,msg1
//			ld		c,9
//			call	bdos

			ld		hl,tests	; first test case
loop:		ld		a,(hl)		; end of list ?
			inc		hl
			or		(hl)
			jp		z,done
			dec		hl
			call	stt			; Test this scenario
			jp		loop

done:		jp		0			; warm boot


tests:
;			dw		adc16
;			dw		add16
;			dw		add16x
;			dw		add16y
;			dw		alu8i
;			dw		alu8r
//	CRASH	dw		alu8rx
;			dw		alu8x
// B180CR	dw		bitx
;			dw		bitz80
;			dw		cpd1
;			dw		cpi1
			dw		daax	// DM doesn't like mnemonic as an operand
;			dw		inca
;			dw		incb
;			dw		incbc
;			dw		incc
;			dw		incd
;			dw		incde
;			dw		ince
;			dw		inch
;			dw		inchl
;			dw		incix
;			dw		inciy
;			dw		incl
;			dw		incm
;			dw		incsp
;			dw		incx
// CRASH	dw		incxh
// CRASH	dw		incxl
// CRASH	dw		incyh
// CRASH 	dw		incyl
;			dw		ld161
;			dw		ld162
;			dw		ld163
;			dw		ld164
;			dw		ld165
;			dw		ld166
;			dw		ld167
;			dw		ld168
;			dw		ld16im
;			dw		ld16ix
;			dw		ld8bd
;			dw		ld8im
;			dw		ld8imx
;			dw		ld8ix1
;			dw		ld8ix2
;			dw		ld8ix3
// CRASH	dw		ld8ixy
;			dw		ld8rr
// CRASH	dw		ld8rrx
;			dw		lda
;			dw		ldd1
;			dw		ldd2
;			dw		ldi1
;			dw		ldi2
;			dw		negx	// DM doesn't like mnemonic as an operand
;			dw		rldx	// DM doesn't like mnemonic as an operand
;			dw		rot8080
// CRASH  	dw		rotxy
// CRASH	dw		rotz80  // CB 30-37 causes crash
;			dw		srz80
// B80CR	dw		srzx
;			dw		st8ix1
;			dw		st8ix2
;			dw		st8ix3
;			dw		stabd
			dw		0

// Now all the instructions


; <adc,sbc> hl,<bc,de,hl,sp> (38,912 cycles)
adc16:	db	0ffh		; flag mask
	tstr	<0edh,042h>,0832ch,04f88h,0f22bh,0b339h,07e1fh,01563h,0d3h,089h,0465eh
	tstr	<0,038h>,0,0,0,0f821h,0,0,0,0,0		; (1024 cycles)
	tstr	0,0,0,0,-1,-1,-1,0d7h,0,-1		; (38 cycles)

	tmsg	'<adc,sbc> hl,<bc,de,hl,sp>'

; add hl,<bc,de,hl,sp> (19,456 cycles)
add16:	db	0ffh		; flag mask
	tstr	9,0c4a5h,0c4c7h,0d226h,0a050h,058eah,08566h,0c6h,0deh,09bc9h
	tstr	030h,0,0,0,0f821h,0,0,0,0,0		; (512 cycles)
	tstr	0,0,0,0,-1,-1,-1,0d7h,0,-1		; (38 cycles)

	tmsg	'add hl,<bc,de,hl,sp>'

; add ix,<bc,de,ix,sp> (19,456 cycles)
add16x:	db	0ffh		; flag mask
	tstr	<0ddh,9>,0ddach,0c294h,0635bh,033d3h,06a76h,0fa20h,094h,068h,036f5h
	tstr	<0,030h>,0,0,0f821h,0,0,0,0,0,0		; (512 cycles)
	tstr	0,0,0,-1,0,-1,-1,0d7h,0,-1		; (38 cycles)

	tmsg	'add ix,<bc,de,ix,sp>'

; add iy,<bc,de,iy,sp> (19,456 cycles)
add16y:	db	0ffh		; flag mask
	tstr	<0fdh,9>,0c7c2h,0f407h,051c1h,03e96h,00bf4h,0510fh,092h,01eh,071eah
	tstr	<0,030h>,0,0f821h,0,0,0,0,0,0,0		; (512 cycles)
	tstr	0,0,-1,0,0,-1,-1,0d7h,0,-1		; (38 cycles)

	tmsg	'add iy,<bc,de,iy,sp>'

; aluop a,nn (28,672 cycles)
alu8i:	db	0ffh		; flag mask
	tstr	0c6h,09140h,07e3ch,07a67h,0df6dh,05b61h,00b29h,010h,066h,085b2h
	tstr	038h,0,0,0,0,0,0,0,-1,0			; (2048 cycles)
	tstr	<0,-1>,0,0,0,0,0,0,0d7h,0,0		; (14 cycles)

	tmsg	'aluop a,nn'

; aluop a,<b,c,d,e,h,l,(hl),a> (753,664 cycles)
alu8r:	db	0ffh		; flag mask
	tstr	080h,0c53eh,0573ah,04c4dh,msbt,0e309h,0a666h,0d0h,03bh,0adbbh
	tstr	03fh,0,0,0,0,0,0,0,-1,0			; (16,384 cycles)
	tstr	0,0ffh,0,0,0,-1,-1,0d7h,0,0		; (46 cycles)

	tmsg	'aluop a,<b,c,d,e,h,l,(hl),a>'

; aluop a,<ixh,ixl,iyh,iyl> (376,832 cycles)
alu8rx:	db	0ffh		; flag mask
	tstr	<0ddh,084h>,0d6f7h,0c76eh,0accfh,02847h,022ddh,0c035h,0c5h,038h,0234bh
	tstr	<020h,039h>,0,0,0,0,0,0,0,-1,0		; (8,192 cycles)
	tstr	0,0ffh,0,0,0,-1,-1,0d7h,0,0		; (46 cycles)

	tmsg	'aluop a,<ixh,ixl,iyh,iyl>'

; aluop a,(<ix,iy>+1) (229,376 cycles)
alu8x:	db	0ffh		; flag mask
	tstr	<0ddh,086h,1>,090b7h,msbt-1,msbt-1,032fdh,0406eh,0c1dch,045h,06eh,0e5fah
	tstr	<020h,038h>,0,1,1,0,0,0,0,-1,0		; (16,384 cycles)
	tstr	0,0ffh,0,0,0,0,0,0d7h,0,0		; (14 cycles)

	tmsg	'aluop a,(<ix,iy>+1)'

; bit n,(<ix,iy>+1) (2048 cycles)
bitx:	db	0ffh		; flag mask
	tstr	<0ddh,0cbh,1,046h>,02075h,msbt-1,msbt-1,03cfch,0a79ah,03d74h,051h,027h,0ca14h
	tstr	<020h,0,0,038h>,0,0,0,0,0,0,053h,0,0	; (256 cycles)
	tstr	0,0ffh,0,0,0,0,0,0,0,0			; (8 cycles)

	tmsg	'bit n,(<ix,iy>+1)'

; bit n,<b,c,d,e,h,l,(hl),a> (49,152 cycles)
bitz80:	db	0ffh		; flag mask
	tstr	<0cbh,040h>,03ef1h,09dfch,07acch,msbt,0be61h,07a86h,050h,024h,01998h
	tstr	<0,03fh>,0,0,0,0,0,0,053h,0,0		; (1024 cycles)
	tstr	0,0ffh,0,0,0,-1,-1,0,-1,0		; (48 cycles)

	tmsg	'bit n,<b,c,d,e,h,l,(hl),a>'

; cpd<r> (1) (6144 cycles)
cpd1:	db	0ffh		; flag mask
	tstr	<0edh,0a9h>,0c7b6h,072b4h,018f6h,msbt+17,08dbdh,1,0c0h,030h,094a3h
	tstr	<0,010h>,0,0,0,0,0,010,0,-1,0		; (1024 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'cpd<r>'

; cpi<r> (1) (6144 cycles)
cpi1:	db	0ffh		; flag mask
	tstr	<0edh,0a1h>,04d48h,0af4ah,0906bh,msbt,04e71h,1,093h,06ah,0907ch
	tstr	<0,010h>,0,0,0,0,0,010,0,-1,0		; (1024 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'cpi<r>'

; <daa,cpl,scf,ccf>
daax:	db	0ffh		; flag mask
	tstr	027h,02141h,009fah,01d60h,0a559h,08d5bh,09079h,004h,08eh,0299dh
	tstr	018h,0,0,0,0,0,0,0d7h,-1,0		; (65,536 cycles)
	tstr	0,0,0,0,0,0,0,0,0,0			; (1 cycle)

	tmsg	'<daa,cpl,scf,ccf>'

; <inc,dec> a (3072 cycles)
inca:	db	0ffh		; flag mask
	tstr	03ch,04adfh,0d5d8h,0e598h,08a2bh,0a7b0h,0431bh,044h,05ah,0d030h
	tstr	001h,0,0,0,0,0,0,0,-1,0			; (512 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'<inc,dec> a'

; <inc,dec> b (3072 cycles)
incb:	db	0ffh		; flag mask
	tstr	004h,0d623h,0432dh,07a61h,08180h,05a86h,01e85h,086h,058h,09bbbh
	tstr	001h,0,0,0,0,0,0ff00h,0,0,0		; (512 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'<inc,dec> b'

; <inc,dec> bc (1536 cycles)
incbc:	db	0ffh		; flag mask
	tstr	003h,0cd97h,044abh,08dc9h,0e3e3h,011cch,0e8a4h,002h,049h,02a4dh
	tstr	008h,0,0,0,0,0,0f821h,0,0,0		; (256 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'<inc,dec> bc'

; <inc,dec> c (3072 cycles)
incc:	db	0ffh		; flag mask
	tstr	00ch,0d789h,00935h,0055bh,09f85h,08b27h,0d208h,095h,005h,00660h
	tstr	001h,0,0,0,0,0,0ffh,0,0,0		; (512 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'<inc,dec> c'

; <inc,dec> d (3072 cycles)
incd:	db	0ffh		; flag mask
	tstr	014h,0a0eah,05fbah,065fbh,0981ch,038cch,0debch,043h,05ch,003bdh
	tstr	001h,0,0,0,0,0ff00h,0,0,0,0		; (512 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'<inc,dec> d'

; <inc,dec> de (1536 cycles)
incde:	db	0ffh		; flag mask
	tstr	013h,0342eh,0131dh,028c9h,00acah,09967h,03a2eh,092h,0f6h,09d54h
	tstr	008h,0,0,0,0,0f821h,0,0,0,0		; (256 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'<inc,dec> de'

; <inc,dec> e (3072 cycles)
ince:	db	0ffh		; flag mask
	tstr	01ch,0602fh,04c0dh,02402h,0e2f5h,0a0f4h,0a10ah,013h,032h,05925h
	tstr	001h,0,0,0,0,0ffh,0,0,0,0		; (512 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'<inc,dec> e'

; <inc,dec> h (3072 cycles)
inch:	db	0ffh		; flag mask
	tstr	024h,01506h,0f2ebh,0e8ddh,0262bh,011a6h,0bc1ah,017h,006h,02818h
	tstr	001h,0,0,0,0ff00h,0,0,0,0,0		; (512 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'<inc,dec> h'

; <inc,dec> hl (1536 cycles)
inchl:	db	0ffh		; flag mask
	tstr	023h,0c3f4h,007a5h,01b6dh,04f04h,0e2c2h,0822ah,057h,0e0h,0c3e1h
	tstr	008h,0,0,0,0f821h,0,0,0,0,0		; (256 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'<inc,dec> hl'

; <inc,dec> ix (1536 cycles)
incix:	db	0ffh		; flag mask
	tstr	<0ddh,023h>,0bc3ch,00d9bh,0e081h,0adfdh,09a7fh,096e5h,013h,085h,00be2h
	tstr	<0,8>,0,0,0f821h,0,0,0,0,0,0		; (256 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'<inc,dec> ix'

; <inc,dec> iy (1536 cycles)
inciy:	db	0ffh		; flag mask
	tstr	<0fdh,023h>,09402h,0637ah,03182h,0c65ah,0b2e9h,0abb4h,016h,0f2h,06d05h
	tstr	<0,8>,0,0f821h,0,0,0,0,0,0,0		; (256 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'<inc,dec> iy'

; <inc,dec> l (3072 cycles)
incl:	db	0ffh		; flag mask
	tstr	02ch,08031h,0a520h,04356h,0b409h,0f4c1h,0dfa2h,0d1h,03ch,03ea2h
	tstr	001h,0,0,0,0ffh,0,0,0,0,0		; (512 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'<inc,dec> l'

; <inc,dec> (hl) (3072 cycles)
incm:	db	0ffh		; flag mask
	tstr	034h,0b856h,00c7ch,0e53eh,msbt,0877eh,0da58h,015h,05ch,01f37h
	tstr	001h,0ffh,0,0,0,0,0,0,0,0		; (512 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'<inc,dec> (hl)'

; <inc,dec> sp (1536 cycles)
incsp:	db	0ffh		; flag mask
	tstr	033h,0346fh,0d482h,0d169h,0deb6h,0a494h,0f476h,053h,002h,0855bh
	tstr	008h,0,0,0,0,0,0,0,0,0f821h		; (256 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'<inc,dec> sp'

; <inc,dec> (<ix,iy>+1) (6144 cycles)
incx:	db	0ffh		; flag mask
	tstr	<0ddh,034h,1>,0fa6eh,msbt-1,msbt-1,02c28h,08894h,05057h,016h,033h,0286fh
	tstr	<020h,1>,0ffh,0,0,0,0,0,0,0,0		; (1024 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'<inc,dec> (<ix,iy>+1)'

; <inc,dec> ixh (3072 cycles)
incxh:	db	0ffh		; flag mask
	tstr	<0ddh,024h>,0b838h,0316ch,0c6d4h,03e01h,08358h,015b4h,081h,0deh,04259h
	tstr	<0,1>,0,0ff00h,0,0,0,0,0,0,0		; (512 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'<inc,dec> ixh'

; <inc,dec> ixl (3072 cycles)
incxl:	db	0ffh		; flag mask
	tstr	<0ddh,02ch>,04d14h,07460h,076d4h,006e7h,032a2h,0213ch,0d6h,0d7h,099a5h
	tstr	<0,1>,0,0ffh,0,0,0,0,0,0,0		; (512 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'<inc,dec> ixl'

; <inc,dec> iyh (3072 cycles)
incyh:	db	0ffh		; flag mask
	tstr	<0ddh,024h>,02836h,09f6fh,09116h,061b9h,082cbh,0e219h,092h,073h,0a98ch
	tstr	<0,1>,0ff00h,0,0,0,0,0,0,0,0		; (512 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'<inc,dec> iyh'

; <inc,dec> iyl (3072 cycles)
incyl:	db	0ffh		; flag mask
	tstr	<0ddh,02ch>,0d7c6h,062d5h,0a09eh,07039h,03e7eh,09f12h,090h,0d9h,0220fh
	tstr	<0,1>,0ffh,0,0,0,0,0,0,0,0		; (512 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'<inc,dec> iyl'

; ld <bc,de>,(nnnn) (32 cycles)
ld161:	db	0ffh		; flag mask
	tstr	<0edh,04bh,LOW(msbt),HIGH(msbt)>,0f9a8h,0f559h,093a4h,0f5edh,06f96h,0d968h,086h,0e6h,04bd8h
	tstr	<0,010h>,0,0,0,0,0,0,0,0,0		; (2 cycles)
	tstr	0,-1,0,0,0,0,0,0,0,0			; (16 cycles)

	tmsg	'ld <bc,de>,(nnnn)'

; ld hl,(nnnn) (16 cycles)
ld162:	db	0ffh		; flag mask
	tstr	<02ah,LOW(msbt),HIGH(msbt)>,09863h,07830h,02077h,0b1feh,0b9fah,0abb8h,004h,006h,06015h
	tstr	0,0,0,0,0,0,0,0,0,0			; (1 cycle)
	tstr	0,-1,0,0,0,0,0,0,0,0			; (16 cycles)

	tmsg	'ld hl,(nnnn)'

; ld sp,(nnnn) (16 cycles)
ld163:	db	0ffh		; flag mask
	tstr	<0edh,07bh,LOW(msbt),HIGH(msbt)>,08dfch,057d7h,02161h,0ca18h,0c185h,027dah,083h,01eh,0f460h
	tstr	0,0,0,0,0,0,0,0,0,0			; (1 cycles)
	tstr	0,-1,0,0,0,0,0,0,0,0			; (16 cycles)

	tmsg	'ld sp,(nnnn)'

; ld <ix,iy>,(nnnn) (32 cycles)
ld164:	db	0ffh		; flag mask
	tstr	<0ddh,02ah,LOW(msbt),HIGH(msbt)>,0ded7h,0a6fah,0f780h,0244ch,087deh,0bcc2h,016h,063h,04c96h
	tstr	020h,0,0,0,0,0,0,0,0,0			; (2 cycles)
	tstr	0,-1,0,0,0,0,0,0,0,0			; (16 cycles)

	tmsg	'ld <ix,iy>,(nnnn)'

; ld (nnnn),<bc,de> (64 cycles)
ld165:	db	0ffh		; flag mask
	tstr	<0edh,043h,LOW(msbt),HIGH(msbt)>,01f98h,0844dh,0e8ach,0c9edh,0c95dh,08f61h,080h,03fh,0c7bfh
	tstr	<0,010h>,0,0,0,0,0,0,0,0,0		; (2 cycles)
	tstr	0,0,0,0,0,-1,-1,0,0,0			; (32 cycles)

	tmsg	'ld (nnnn),<bc,de>'

; ld (nnnn),hl (16 cycles)
ld166:	db	0ffh		; flag mask
	tstr	<022h,LOW(msbt),HIGH(msbt)>,0d003h,07772h,07f53h,03f72h,064eah,0e180h,010h,02dh,035e9h
	tstr	0,0,0,0,0,0,0,0,0,0			; (1 cycle)
	tstr	0,0,0,0,-1,0,0,0,0,0			; (16 cycles)

	tmsg	'ld (nnnn),hl'

; ld (nnnn),sp (16 cycles)
ld167:	db	0ffh		; flag mask
	tstr	<0edh,073h,LOW(msbt),HIGH(msbt)>,0c0dch,0d1d6h,0ed5ah,0f356h,0afdah,06ca7h,044h,09fh,03f0ah
	tstr	0,0,0,0,0,0,0,0,0,0			; (1 cycle)
	tstr	0,0,0,0,0,0,0,0,0,-1			; (16 cycles)

	tmsg	'ld (nnnn),sp'

; ld (nnnn),<ix,iy> (64 cycles)
ld168:	db	0ffh		; flag mask
	tstr	<0ddh,022h,LOW(msbt),HIGH(msbt)>,06cc3h,00d91h,06900h,08ef8h,0e3d6h,0c3f7h,0c6h,0d9h,0c2dfh
	tstr	020h,0,0,0,0,0,0,0,0,0			; (2 cycles)
	tstr	0,0,-1,-1,0,0,0,0,0,0			; (32 cycles)

	tmsg	'ld (nnnn),<ix,iy>'

; ld <bc,de,hl,sp>,nnnn (64 cycles)
ld16im:	db	0ffh		; flag mask
	tstr	1,05c1ch,02d46h,08eb9h,06078h,074b1h,0b30eh,046h,0d1h,030cch
	tstr	030h,0,0,0,0,0,0,0,0,0			; (4 cycles)
	tstr	<0,0ffh,0ffh>,0,0,0,0,0,0,0,0,0		; (16 cycles)

	tmsg	'ld <bc,de,hl,sp>,nnnn'

; ld <ix,iy>,nnnn (32 cycles)
ld16ix:	db	0ffh		; flag mask
	tstr	<0ddh,021h>,087e8h,02006h,0bd12h,0b69bh,07253h,0a1e5h,051h,013h,0f1bdh
	tstr	020h,0,0,0,0,0,0,0,0,0			; (2 cycles)
	tstr	<0,0,0ffh,0ffh>,0,0,0,0,0,0,0,0,0	; (16 cycles)

	tmsg	'ld <ix,iy>,nnnn'

; ld a,<(bc),(de)> (44 cycles)
ld8bd:	db	0ffh		; flag mask
	tstr	00ah,0b3a8h,01d2ah,07f8eh,042ach,msbt,msbt,0c6h,0b1h,0ef8eh
	tstr	010h,0,0,0,0,0,0,0,0,0			; (2 cycles)
	tstr	0,0ffh,0,0,0,0,0,0d7h,-1,0		; (22 cycles)

	tmsg	'ld a,<(bc),(de)>'

; ld <b,c,d,e,h,l,(hl),a>,nn (64 cycles)
ld8im:	db	0ffh		; flag mask
	tstr	6,0c407h,0f49dh,0d13dh,00339h,0de89h,07455h,053h,0c0h,05509h
	tstr	038h,0,0,0,0,0,0,0,0,0			; (8 cycles)
	tstr	0,0,0,0,0,0,0,0,-1,0			; (8 cycles)

	tmsg	'ld <b,c,d,e,h,l,(hl),a>,nn'

; ld (<ix,iy>+1),nn (32 cycles)
ld8imx:	db	0ffh		; flag mask
	tstr	<0ddh,036h,1>,01b45h,msbt-1,msbt-1,0d5c1h,061c7h,0bdc4h,0c0h,085h,0cd16h
	tstr	020h,0,0,0,0,0,0,0,0,0			; (2 cycles)
	tstr	<0,0,0,-1>,0,0,0,0,0,0,0,-1,0		; (16 cycles)

	tmsg	'ld (<ix,iy>+1),nn'

; ld <b,c,d,e>,(<ix,iy>+1) (512 cycles)
ld8ix1:	db	0ffh		; flag mask
	tstr	<0ddh,046h,1>,0d016h,msbt-1,msbt-1,04260h,07f39h,00404h,097h,04ah,0d085h
	tstr	<020h,018h>,0,1,1,0,0,0,0,0,0		; (32 cycles)
	tstr	0,-1,0,0,0,0,0,0,0,0			; (16 cycles)

	tmsg	'ld <b,c,d,e>,(<ix,iy>+1)'

; ld <h,l>,(<ix,iy>+1) (256 cycles)
ld8ix2:	db	0ffh		; flag mask
	tstr	<0ddh,066h,1>,084e0h,msbt-1,msbt-1,09c52h,0a799h,049b6h,093h,000h,0eeadh
	tstr	<020h,008h>,0,1,1,0,0,0,0,0,0		; (16 cycles)
	tstr	0,-1,0,0,0,0,0,0,0,0			; (16 cycles)

	tmsg	'ld <h,l>,(<ix,iy>+1)'

; ld a,(<ix,iy>+1) (128 cycles)
ld8ix3:	db	0ffh		; flag mask
	tstr	<0ddh,07eh,1>,0d8b6h,msbt-1,msbt-1,0c612h,0df07h,09cd0h,043h,0a6h,0a0e5h
	tstr	020h,0,1,1,0,0,0,0,0,0			; (8 cycles)
	tstr	0,-1,0,0,0,0,0,0,0,0			; (16 cycles)

	tmsg	'ld a,(<ix,iy>+1)'

; ld <ixh,ixl,iyh,iyl>,nn (32 cycles)
ld8ixy:	db	0ffh		; flag mask
	tstr	<0ddh,026h>,03c53h,04640h,0e179h,07711h,0c107h,01afah,081h,0adh,05d9bh
	tstr	<020h,8>,0,0,0,0,0,0,0,0,0		; (4 cycles)
	tstr	0,0,0,0,0,0,0,0,-1,0			; (8 cycles)

	tmsg	'ld <ixh,ixl,iyh,iyl>,nn'

; ld <b,c,d,e,h,l,a>,<b,c,d,e,h,l,a> (3456 cycles)
ld8rr:	db	0ffh		; flag mask
	tstr	040h,072a4h,0a024h,061ach,msbt,082c7h,0718fh,097h,08fh,0ef8eh
	tstr	03fh,0,0,0,0,0,0,0,0,0			; (64 cycles)
	tstr	0,0ffh,0,0,0,-1,-1,0d7h,-1,0		; (54 cycles)

	tmsg	'ld <bcdehla>,<bcdehla>'

; ld <b,c,d,e,ixy,a>,<b,c,d,e,ixy,a> (6912 cycles)
ld8rrx:	db	0ffh		; flag mask
	tstr	<0ddh,040h>,0bcc5h,msbt,msbt,msbt,02fc2h,098c0h,083h,01fh,03bcdh
	tstr	<020h,03fh>,0,0,0,0,0,0,0,0,0		; (128 cycles)
	tstr	0,0ffh,0,0,0,-1,-1,0d7h,-1,0		; (54 cycles)

	tmsg	'ld <bcdexya>,<bcdexya>'

; ld a,(nnnn) / ld (nnnn),a (44 cycles)
lda:	db	0ffh		; flag mask
	tstr	<032h,LOW(msbt),HIGH(msbt)>,0fd68h,0f4ech,044a0h,0b543h,00653h,0cdbah,0d2h,04fh,01fd8h
	tstr	008h,0,0,0,0,0,0,0,0,0			; (2 cycle)
	tstr	0,0ffh,0,0,0,0,0,0d7h,-1,0		; (22 cycles)

	tmsg	'ld a,(nnnn) / ld (nnnn),a'

; ldd<r> (1) (44 cycles)
ldd1:	db	0ffh		; flag mask
	tstr	<0edh,0a8h>,09852h,068fah,066a1h,msbt+3,msbt+1,1,0c1h,068h,020b7h
	tstr	<0,010h>,0,0,0,0,0,0,0,0,0		; (2 cycles)
	tstr	0,-1,0,0,0,0,0,0d7h,0,0			; (22 cycles)

	tmsg	'ldd<r> (1)'

; ldd<r> (2) (44 cycles)
ldd2:	db	0ffh		; flag mask
	tstr	<0edh,0a8h>,0f12eh,0eb2ah,0d5bah,msbt+3,msbt+1,2,047h,0ffh,0fbe4h
	tstr	<0,010h>,0,0,0,0,0,0,0,0,0		; (2 cycles)
	tstr	0,-1,0,0,0,0,0,0d7h,0,0			; (22 cycles)

	tmsg	'ldd<r> (2)'

; ldi<r> (1) (44 cycles)
ldi1:	db	0ffh		; flag mask
	tstr	<0edh,0a0h>,0fe30h,003cdh,06058h,msbt+2,msbt,1,004h,060h,02688h
	tstr	<0,010h>,0,0,0,0,0,0,0,0,0		; (2 cycles)
	tstr	0,-1,0,0,0,0,0,0d7h,0,0			; (22 cycles)

	tmsg	'ldi<r> (1)'

; ldi<r> (2) (44 cycles)
ldi2:	db	0ffh		; flag mask
	tstr	<0edh,0a0h>,04aceh,0c26eh,0b188h,msbt+2,msbt,2,014h,02dh,0a39fh
	tstr	<0,010h>,0,0,0,0,0,0,0,0,0		; (2 cycles)
	tstr	0,-1,0,0,0,0,0,0d7h,0,0			; (22 cycles)

	tmsg	'ldi<r> (2)'

; neg (16,384 cycles)
negx:	db	0ffh		; flag mask
	tstr	<0edh,044h>,038a2h,05f6bh,0d934h,057e4h,0d2d6h,04642h,043h,05ah,009cch
	tstr	0,0,0,0,0,0,0,0d7h,-1,0			; (16,384 cycles)
	tstr	0,0,0,0,0,0,0,0,0,0			; (1 cycle)

	tmsg	'neg'

; <rld,rrd> (7168 cycles)
rldx:	db	0ffh		; flag mask
	tstr	<0edh,067h>,091cbh,0c48bh,0fa62h,msbt,0e720h,0b479h,040h,006h,08ae2h
	tstr	<0,8>,0ffh,0,0,0,0,0,0,0,0		; (512 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,-1,0			; (14 cycles)

	tmsg	'<rrd,rld>'

; <rlca,rrca,rla,rra> (6144 cycles)
rot8080: db	0ffh		; flag mask
	tstr	7,0cb92h,06d43h,00a90h,0c284h,00c53h,0f50eh,091h,0ebh,040fch
	tstr	018h,0,0,0,0,0,0,0,-1,0			; (1024 cycles)
	tstr	0,0,0,0,0,0,0,0d7h,0,0			; (6 cycles)

	tmsg	'<rlca,rrca,rla,rra>'

; shift/rotate (<ix,iy>+1) (416 cycles)
rotxy:	db	0ffh		; flag mask
	tstr	<0ddh,0cbh,1,6>,0ddafh,msbt-1,msbt-1,0ff3ch,0dbf6h,094f4h,082h,080h,061d9h
	tstr	<020h,0,0,038h>,0,0,0,0,0,0,080h,0,0	; (32 cycles)
	tstr	0,0ffh,0,0,0,0,0,057h,0,0		; (13 cycles)

	tmsg	'shf/rot (<ix,iy>+1)'

; shift/rotate <b,c,d,e,h,l,(hl),a> (6784 cycles)
rotz80:	db	0ffh		; flag mask
	tstr	0cbh,0ccebh,05d4ah,0e007h,msbt,01395h,030eeh,043h,078h,03dadh
	tstr	<0,03fh>,0,0,0,0,0,0,080h,0,0		; (128 cycles)
	tstr	0,0ffh,0,0,0,-1,-1,057h,-1,0		; (53 cycles)

	tmsg	'shf/rot <b,c,d,e,h,l,(hl),a>'

; <set,res> n,<b,c,d,e,h,l,(hl),a> (7936 cycles)
srz80:	db	0ffh		; flag mask
	tstr	<0cbh,080h>,02cd5h,097abh,039ffh,msbt,0d14bh,06ab2h,053h,027h,0b538h
	tstr	<0,07fh>,0,0,0,0,0,0,0,0,0		; (128 cycles)
	tstr	0,0ffh,0,0,0,-1,-1,0d7h,-1,0		; (62 cycles)

	tmsg	'<set,res> n,<bcdehl(hl)a>'

; <set,res> n,(<ix,iy>+1) (1792 cycles)
srzx:	db	0ffh		; flag mask
	tstr	<0ddh,0cbh,1,086h>,0fb44h,msbt-1,msbt-1,0ba09h,068beh,032d8h,010h,05eh,0a867h
	tstr	<020h,0,0,078h>,0,0,0,0,0,0,0,0,0	; (128 cycles)
	tstr	0,0ffh,0,0,0,0,0,0d7h,0,0		;(14 cycles)

	tmsg	'<set,res> n,(<ix,iy>+1)'

; ld (<ix,iy>+1),<b,c,d,e> (1024 cycles)
st8ix1:	db	0ffh		; flag mask
	tstr	<0ddh,070h,1>,0270dh,msbt-1,msbt-1,0b73ah,0887bh,099eeh,086h,070h,0ca07h
	tstr	<020h,003h>,0,1,1,0,0,0,0,0,0		; (32 cycles)
	tstr	0,0,0,0,0,-1,-1,0,0,0			; (32 cycles)

	tmsg	'ld (<ix,iy>+1),<b,c,d,e>'

; ld (<ix,iy>+1),<h,l> (256 cycles)
st8ix2:	db	0ffh		; flag mask
	tstr	<0ddh,074h,1>,0b664h,msbt-1,msbt-1,0e8ach,0b5f5h,0aafeh,012h,010h,09566h
	tstr	<020h,001h>,0,1,1,0,0,0,0,0,0		; (16 cycles)
	tstr	0,0,0,0,-1,0,0,0,0,0			; (32 cycles)

	tmsg	'ld (<ix,iy>+1),<h,l>'

; ld (<ix,iy>+1),a (64 cycles)
st8ix3:	db	0ffh		; flag mask
	tstr	<0ddh,077h,1>,067afh,msbt-1,msbt-1,04f13h,00644h,0bcd7h,050h,0ach,05fafh
	tstr	020h,0,1,1,0,0,0,0,0,0			; (8 cycles)
	tstr	0,0,0,0,0,0,0,0,-1,0			; (8 cycles)

	tmsg	'ld (<ix,iy>+1),a'

; ld (<bc,de>),a (96 cycles)
stabd:	db	0ffh		; flag mask
	tstr	2,00c3bh,0b592h,06cffh,0959eh,msbt,msbt+1,0c1h,021h,0bde7h
	tstr	018h,0,0,0,0,0,0,0,0,0			; (4 cycles)
	tstr	0,-1,0,0,0,0,0,0,-1,0			; (24 cycles)

	tmsg	'ld (<bc,de>),a'


; start test pointed to by (hl)

stt:		push	hl
			ld		a,(hl)			; get pointer to test
			inc		hl
			ld		h,(hl)
			ld		l,a
			ld		a,(hl)			; flag mask
			ld		(flgmsk+1),a	; Modifying code!!!
			inc		hl
			push	hl
			ld		de,20
			add		hl,de			; point to incmask
			ld		de,counter
			call	initmask
			pop	hl
			push	hl
			ld		de,20+20
			add		hl,de			; point to scanmask
			ld		de,shifter
			call	initmask
			ld		hl,shifter
			ld		(hl),1			; first bit
			pop		hl
			push	hl
			ld		de,iut			; copy initial instruction under test
			ld		bc,4
			ldir
			ld		de,msbt			; copy initial machine state
			ld		bc,16
			ldir
			ld		de,20+20		; skip incmask and scanmask
			push	de
			ld		de,prefix		; Print "; " before the line
			ld		c,9
			call	bdos
			pop		de
			add	hl,de
			ex	de,hl
			ld	c,9
			call	bdos			; show test name
			ld 		de,crlf			; Print CRLF after intro line
			ld		c,9
			call	bdos
; test loop
tlp:		ld		a,(iut)
			cp		076h			; pragmatically avoid halt intructions
			jp		z,tlp2
			and		a,0dfh
			cp		0ddh
			jp		nz,tlp1
			ld		a,(iut+1)
			cp		076h
tlp1:		call	nz,test			; execute the test instruction
tlp2:		call	count			; increment the counter
			call	nz,shift		; shift the scan bit
			pop	hl					; pointer to test case
			jp		z,tlp3			; done if shift returned NZ
			ld		de,20+20+20
// ***** COMMENT OUT THE CRC CHECKING AND REPORTING ***
//			add		hl,de		; point to expected crc
//			call	cmpcrc
//			ld		de,okmsg
//			jp		z,tlpok
//			ld		de,ermsg1
//			ld		c,9
//			call	bdos
//			call	phex8
//			ld		de,ermsg2
//			ld		c,9
//			call	bdos
//			ld		hl,crcval
//			call	phex8
//			ld		de,crlf
//tlpok:
//			ld		c,9
//			call	bdos
// ***** ENDS *****
			pop	hl
			inc	hl
			inc	hl
			ret

tlp3:		push	hl
			ld		a,1		; initialise count and shift scanners
			ld		(cntbit),a
			ld		(shfbit),a
			ld		hl,counter
			ld		(cntbyt),hl
			ld		hl,shifter
			ld		(shfbyt),hl

	ld	b,4		; bytes in iut field
	pop	hl		; pointer to test case
	push	hl
	ld	de,iut
	call	setup		; setup iut
	ld	b,16		; bytes in machine state
	ld	de,msbt
	call	setup		; setup machine state
	jp	tlp

; setup a field of the test case
; b  = number of bytes
; hl = pointer to base case
; de = destination
setup:	call	subyte
	inc	hl
	dec	b
	jp	nz,setup
	ret

subyte:	push	bc
	push	de
	push	hl
	ld	c,(hl)		; get base byte
	ld	de,20
	add	hl,de		; point to incmask
	ld	a,(hl)
	cp	0
	jp	z,subshf
	ld	b,8		; 8 bits
subclp:	rrca
	push	af
	ld	a,0
	call	c,nxtcbit	; get next counter bit if mask bit was set
	xor	c		; flip bit if counter bit was set
	rrca
	ld	c,a
	pop	af
	dec	b
	jp	nz,subclp
	ld	b,8
subshf:	ld	de,20
	add	hl,de		; point to shift mask
	ld	a,(hl)
	cp	0
	jp	z,substr
	ld	b,8		; 8 bits
sbshf1:	rrca
	push	af
	ld	a,0
	call	c,nxtsbit	; get next shifter bit if mask bit was set
	xor	c		; flip bit if shifter bit was set
	rrca
	ld	c,a
	pop	af
	dec	b
	jp	nz,sbshf1
substr:	pop	hl
	pop	de
	ld	a,c
	ld	(de),a		; mangled byte to destination
	inc	de
	pop	bc
	ret

; get next counter bit in low bit of a
cntbit:	ds	1
cntbyt:	ds	2

nxtcbit: push	bc
	push	hl
	ld	hl,(cntbyt)
	ld	b,(hl)
	ld	hl,cntbit
	ld	a,(hl)
	ld	c,a
	rlca
	ld	(hl),a
	cp	a,1
	jp	nz,ncb1
	ld	hl,(cntbyt)
	inc	hl
	ld	(cntbyt),hl
ncb1:	ld	a,b
	and	c
	pop	hl
	pop	bc
	ret	z
	ld	a,1
	ret

; get next shifter bit in low bit of a
shfbit:	ds	1
shfbyt:	ds	2

nxtsbit: push	bc
	push	hl
	ld	hl,(shfbyt)
	ld	b,(hl)
	ld	hl,shfbit
	ld	a,(hl)
	ld	c,a
	rlca
	ld	(hl),a
	cp	a,1
	jp	nz,nsb1
	ld	hl,(shfbyt)
	inc	hl
	ld	(shfbyt),hl
nsb1:	ld	a,b
	and	c
	pop	hl
	pop	bc
	ret	z
	ld	a,1
	ret


; clear memory at hl, bc bytes
clrmem:	push	af
	push	bc
	push	de
	push	hl
	ld	(hl),0
	ld	d,h
	ld	e,l
	inc	de
	dec	bc
	ldir
	pop	hl
	pop	de
	pop	bc
	pop	af
	ret

; initialise counter or shifter
; de = pointer to work area for counter or shifter
; hl = pointer to mask
initmask:
	push	de
	ex	de,hl
	ld	bc,20+20
	call	clrmem		; clear work area
	ex	de,hl
	ld	b,20		; byte counter
	ld	c,1		; first bit
	ld	d,0		; bit counter
imlp:	ld	e,(hl)
imlp1:	ld	a,e
	and	a,c
	jp	z,imlp2
	inc	d
imlp2:	ld	a,c
	rlca
	ld	c,a
	cp	a,1
	jp	nz,imlp1
	inc	hl
	dec	b
	jp	nz,imlp
; got number of 1-bits in mask in reg d
	ld	a,d
	and	0f8h
	rrca
	rrca
	rrca			; divide by 8 (get byte offset)
	ld	l,a
	ld	h,0
	ld	a,d
	and	a,7		; bit offset
	inc	a
	ld	b,a
	ld	a,080h
imlp3:	rlca
	dec	b
	jp	nz,imlp3
	pop	de
	add	hl,de
	ld	de,20
	add	hl,de
	ld	(hl),a
	ret

; multi-byte counter
count:	push	bc
	push	de
	push	hl
	ld	hl,counter	; 20 byte counter starts here
	ld	de,20		; somewhere in here is the stop bit
	ex	de,hl
	add	hl,de
	ex	de,hl
cntlp:	inc	(hl)
	ld	a,(hl)
	cp	0
	jp	z,cntlp1	; overflow to next byte
	ld	b,a
	ld	a,(de)
	and	a,b		; test for terminal value
	jp	z,cntend
	ld	(hl),0		; reset to zero
cntend:	pop	bc
	pop	de
	pop	hl
	ret

cntlp1:	inc	hl
	inc	de
	jp	cntlp


; multi-byte shifter
shift:	push	bc
	push	de
	push	hl
	ld	hl,shifter	; 20 byte shift register starts here
	ld	de,20		; somewhere in here is the stop bit
	ex	de,hl
	add	hl,de
	ex	de,hl
shflp:	ld	a,(hl)
	or	a
	jp	z,shflp1
	ld	b,a
	ld	a,(de)
	and	b
	jp	nz,shlpe
	ld	a,b
	rlca
	cp	a,1
	jp	nz,shflp2
	ld	(hl),0
	inc	hl
	inc	de
shflp2:	ld	(hl),a
	xor	a		; set Z
shlpe:	pop	hl
	pop	de
	pop	bc
	ret
shflp1:	inc	hl
	inc	de
	jp	shflp

counter: ds	2*20
shifter: ds	2*20

; test harness
test:		push	af
			push	bc
			push	de
			push	hl
			// Print out the instruction 4 bytes and the registers 16 bytes
			// as they are on entry to the routine
			ld		hl,iut		// Print 4 bytes for instruction
			ld		b,4
			call	hexstr
			ld		e,'-'		// Print separator
			ld		c,2
			call	bdos
			ld		hl,msbt		// Print 16 bytes for start condition
			ld		b,16
			call	hexstr
			ld		e,'-'		// Print next separator
			ld		c,2
			call	bdos
//  if	0
//	ld	de,crlf
//	ld	c,9
//	call	bdos
//	ld	hl,iut
//	ld	b,4
//	call	hexstr
//	ld	e,' '
//	ld	c,2
//	call	bdos
//	ld	b,16
//	ld	hl,msbt
//	call	hexstr
//  endif
	di			; disable interrupts
	ld	(spsav),sp	; save stack pointer
	ld	sp,msbt+2	; point to test-case machine state
	pop	iy		; and load all regs
	pop	ix
	pop	hl
	pop	de
	pop	bc
	pop	af
	ld	sp,(spbt)
iut:	ds	4		; max 4 byte instruction under test
	ld	(spat),sp	; save stack pointer
	ld	sp,spat
	push	af		; save other registers
	push	bc
	push	de
	push	hl
	push	ix
	push	iy
	ld	sp,(spsav)	; restore stack pointer
	ei			; enable interrupts
	ld	hl,(msbt)	; copy memory operand
	ld	(msat),hl
	ld	hl,flgsat	; flags after test
	ld	a,(hl)
flgmsk:	and	a,0d7h		; mask-out irrelevant bits (self-modified code!)
	ld	(hl),a
// ***** COMMENT OUT CRC UPDATE *****
//	ld	b,16		; total of 16 bytes of state
//	ld	de,msat
//	ld	hl,crcval
//tcrc:	ld	a,(de)
//	inc	de
//	call	updcrc		; accumulate crc of this test case
//	dec	b
//	jp	nz,tcrc
// ***** ENDS *****
	if 0
	ld	e,' '
	ld	c,2
	call	bdos
	ld	hl,crcval
	call	phex8
	ld	de,crlf
	ld	c,9
	call	bdos
	ld	hl,msat
	ld	b,16
	call	hexstr
	ld	de,crlf
	ld	c,9
	call	bdos
      endif
// ***** PRINT OUT RESULTS OF TEST *****
			ld		hl,msat		// Print 16 bytes for final
			ld		b,16
			call	hexstr
			ld		de,crlf		// CRLF at end of line
			ld		c,9
			call	bdos
// ***** ENDS *****
			pop		hl
			pop		de
			pop		bc
			pop		af
			ret

; machine state after test
msat:	ds	14	; memop,iy,ix,hl,de,bc,af
spat:	ds	2	; stack pointer after test
flgsat:	equ	spat-2	; flags

spsav:	ds	2	; saved stack pointer

; display hex string (pointer in hl, byte count in b)
hexstr:	ld	a,(hl)
	call	phex2
	inc	hl
	dec	b
	jp	nz,hexstr
	ret

; display hex
; display the big-endian 32-bit value pointed to by hl
phex8:	push	af
	push	bc
	push	hl
	ld	b,4
ph8lp:	ld	a,(hl)
	call	phex2
	inc	hl
	dec	b
	jp	nz,ph8lp
	pop	hl
	pop	bc
	pop	af
	ret

; display byte in a
phex2:	push	af
	rrca
	rrca
	rrca
	rrca
	call	phex1
	pop	af
; fall through

; display low nibble in a
phex1:	push	af
	push	bc
	push	de
	push	hl
	and	a,0fh
	cp	a,10
	jp	c,ph11
	add	a,'a'-'9'-1
ph11:	add	a,'0'
	ld	e,a
	ld	c,2
	call	bdos
	pop	hl
	pop	de
	pop	bc
	pop	af
	ret

// Call the BDOS

bdos		push	af
			push	bc
			push	de
			push	hl
			IFDEF	BOX80
				LD		A,C		// Get command byte
				CP		A,2		// CONOUT ?
				JR		Z,bdos_conout
				CP		A,9		// String output
				JR		NZ,bdos_x	
bdos_string:	LD		A,(DE)
				CP		A,'$'
				JR		Z,bdos_x
				RST		$08
				INC		DE
				JR		bdos_string
bdos_conout:
				LD		A,E
				RST		$08
bdos_x:			
			ELSE
				call	5
			ENDIF
			pop		hl
			pop		de
			pop		bc
			pop		af
			ret


// Messages

//msg1:		db	'Z80 instruction exerciser',10,13,'$'
//msg2:		db	'Tests complete$'
//okmsg:	db	'  OK',10,13,'$'
//ermsg1:	db	'  ERROR **** crc expected:$'
//ermsg2:	db	' found:$'
prefix:		db	'; $'
crlf:		db	13,10,'$'
